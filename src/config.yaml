options:
  loglevel:
    default: 1
    type: int
    description: Mon and OSD debug level. Max is 20.
  source:
    type: string
    default: caracal
    description: |
      Optional configuration to support use of additional sources such as:
      .
        - ppa:myteam/ppa
        - cloud:bionic-ussuri
        - cloud:xenial-proposed/queens
        - http://my.archive.com/ubuntu main
      .
      The last option should be used in conjunction with the key configuration
      option.
  key:
    type: string
    default:
    description: |
      Key ID to import to the apt keyring to support use with arbitary source
      configuration from outside of Launchpad archives or PPA's.
  use-syslog:
    type: boolean
    default: False
    description: |
      If set to True, supporting services will log to syslog.
  ceph-public-network:
    type: string
    default:
    description: |
      The IP address and netmask of the public (front-side) network (e.g.,
      192.168.0.0/24).
      If multiple networks are to be used, a space-delimited list of a.b.c.d/x
      can be provided.
  prefer-ipv6:
    type: boolean
    default: False
    description: |
      If True enables IPv6 support. The charm will expect network interfaces
      to be configured with an IPv6 address. If set to False (default) IPv4
      is expected.

      NOTE: these charms do not currently support IPv6 privacy extension. In
      order for this charm to function correctly, the privacy extension must be
      disabled and a non-temporary address must be configured/available on
      your network interface.
  ceph-osd-replication-count:
    type: int
    default: 3
    description: |
      This value dictates the number of replicas ceph must make of any
      object it stores within the images rbd pool. Of course, this only
      applies if using Ceph as a backend store. Note that once the images
      rbd pool has been created, changing this value will not have any
      effect (although it can be changed in ceph by manually configuring
      your ceph cluster).
  ceph-pool-weight:
    type: int
    default: 5
    description: |
      Defines a relative weighting of the pool as a percentage of the total
      amount of data in the Ceph cluster. This effectively weights the number
      of placement groups for the pool created to be appropriately portioned
      to the amount of data expected. For example, if the compute images
      for the OpenStack compute instances are expected to take up 20% of the
      overall configuration then this value would be specified as 20. Note -
      it is important to choose an appropriate value for the pool weight as
      this directly affects the number of placement groups which will be
      created for the pool. The number of placement groups for a pool can
      only be increased, never decreased - so it is important to identify the
      percent of data that will likely reside in the pool.
  rbd-pool-name:
    default:
    type: string
    description: |
      Name of the data pool to be created/used. If not defined a data pool name
      will be generated based on the name of the application.
  metadata-pool:
    type: string
    default:
    description: |
      Name of the metadata pool to be created/used. If not defined a metadata
      pool name will be generated based on the name of the application.
      The metadata pool is always replicated, not erasure coded.
  pool-type:
    type: string
    default: replicated
    description: |
      Ceph pool type to use for storage - valid values include ‘replicated’
      and ‘erasure-coded’.  Note that if erasure-coded is enabled then data
      pools for both replicated and erasure-coded are created - use of the
      erasure-coded pool is controlled using xattrs on directories and files.
  ec-pool-weight:
    type: int
    default: 5
    description: |
      Defines a relative weighting of the EC pool as a percentage of the total
      amount of data in the Ceph cluster. This effectively weights the number
      of placement groups for the pool created to be appropriately portioned
      to the amount of data expected. For example, if the compute images
      for the OpenStack compute instances are expected to take up 20% of the
      overall configuration then this value would be specified as 20. Note -
      it is important to choose an appropriate value for the pool weight as
      this directly affects the number of placement groups which will be
      created for the pool. The number of placement groups for a pool can
      only be increased, never decreased - so it is important to identify the
      percent of data that will likely reside in the pool.
  ec-profile-name:
    type: string
    default:
    description: |
      Name for the EC profile to be created for the EC pools. If not defined
      a profile name will be generated based on the name of the pool used by
      the application.
  ec-profile-k:
    type: int
    default: 1
    description: |
      Number of data chunks that will be used for EC data pool. K+M factors
      should never be greater than the number of available zones (or hosts)
      for balancing.
  ec-profile-m:
    type: int
    default: 2
    description: |
      Number of coding chunks that will be used for EC data pool. K+M factors
      should never be greater than the number of available zones (or hosts)
      for balancing.
  ec-profile-locality:
    type: int
    default:
    description: |
      (lrc plugin - l) Group the coding and data chunks into sets of size l.
      For instance, for k=4 and m=2, when l=3 two groups of three are created.
      Each set can be recovered without reading chunks from another set. Note
      that using the lrc plugin does incur more raw storage usage than isa or
      jerasure in order to reduce the cost of recovery operations.
  ec-profile-crush-locality:
    type: string
    default:
    description: |
      (lrc plugin) The type of the crush bucket in which each set of chunks
      defined by l will be stored. For instance, if it is set to rack, each
      group of l chunks will be placed in a different rack. It is used to
      create a CRUSH rule step such as step choose rack. If it is not set,
      no such grouping is done.
  ec-profile-durability-estimator:
    type: int
    default:
    description: |
      (shec plugin - c) The number of parity chunks each of which includes
      each data chunk in its calculation range. The number is used as a
      durability estimator. For instance, if c=2, 2 OSDs can be down
      without losing data.
  ec-profile-helper-chunks:
    type: int
    default:
    description: |
      (clay plugin - d) Number of OSDs requested to send data during
      recovery of a single chunk. d needs to be chosen such that
      k+1 <= d <= k+m-1. Larger the d, the better the savings.
  ec-profile-scalar-mds:
    type: string
    default:
    description: |
      (clay plugin) specifies the plugin that is used as a building
      block in the layered construction. It can be one of jerasure,
      isa, shec (defaults to jerasure).
  ec-profile-plugin:
    type: string
    default: jerasure
    description: |
      EC plugin to use for this applications pool. The following list of
      plugins acceptable - jerasure, lrc, isa, shec, clay.
  ec-profile-technique:
    type: string
    default:
    description: |
      EC profile technique used for this applications pool - will be
      validated based on the plugin configured via ec-profile-plugin.
      Supported techniques are ‘reed_sol_van’, ‘reed_sol_r6_op’,
      ‘cauchy_orig’, ‘cauchy_good’, ‘liber8tion’ for jerasure,
      ‘reed_sol_van’, ‘cauchy’ for isa and ‘single’, ‘multiple’
      for shec.
  ec-profile-device-class:
    type: string
    default:
    description: |
      Device class from CRUSH map to use for placement groups for
      erasure profile - valid values: ssd, hdd or nvme (or leave
      unset to not use a device class).
  bluestore-compression-algorithm:
    type: string
    default:
    description: |
      Compressor to use (if any) for pools requested by this charm.
      .
      NOTE: The ceph-osd charm sets a global default for this value (defaults
      to 'lz4' unless configured by the end user) which will be used unless
      specified for individual pools.
  bluestore-compression-mode:
    type: string
    default:
    description: |
      Policy for using compression on pools requested by this charm.
      .
      'none' means never use compression.
      'passive' means use compression when clients hint that data is
      compressible.
      'aggressive' means use compression unless clients hint that
      data is not compressible.
      'force' means use compression under all circumstances even if the clients
      hint that the data is not compressible.
  bluestore-compression-required-ratio:
    type: float
    default:
    description: |
      The ratio of the size of the data chunk after compression relative to the
      original size must be at least this small in order to store the
      compressed version on pools requested by this charm.
  bluestore-compression-min-blob-size:
    type: int
    default:
    description: |
      Chunks smaller than this are never compressed on pools requested by
      this charm.
  bluestore-compression-min-blob-size-hdd:
    type: int
    default:
    description: |
      Value of bluestore compression min blob size for rotational media on
      pools requested by this charm.
  bluestore-compression-min-blob-size-ssd:
    type: int
    default:
    description: |
      Value of bluestore compression min blob size for solid state media on
      pools requested by this charm.
  bluestore-compression-max-blob-size:
    type: int
    default:
    description: |
      Chunks larger than this are broken into smaller blobs sizing bluestore
      compression max blob size before being compressed on pools requested by
      this charm.
  bluestore-compression-max-blob-size-hdd:
    type: int
    default:
    description: |
      Value of bluestore compression max blob size for rotational media on
      pools requested by this charm.
  bluestore-compression-max-blob-size-ssd:
    type: int
    default:
    description: |
      Value of bluestore compression max blob size for solid state media on
      pools requested by this charm.
  mds-cache-memory-limit:
    type: string
    default: 4Gi
    description: |
      Set the maximum size of Metadata Server (MDS) cache, in bytes. The MDS
      will try to stay under this value by (1 - mds_cache_reservation) as a
      percent. This is not a hard limit.
  mds-cache-reservation:
    type: float
    default: 0.05
    description: |
      The cache reservation for the MDS cache to maintain. The MDS will try
      to stay under this value as a percent by (1 - mds_cache_reservation)
      as a percent.
  mds-health-cache-threshold:
    type: float
    default: 1.5
    description: |
      If the MDS exceeds the cache size specified in mds-cache-memory-limit,
      this parameter sets the memory limit, as a percentage of
      mds_cache_reservation, that triggers a health warning.
